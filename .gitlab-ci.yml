variables:
  container_name: quarkus-kafka
  OPENSHIFT_PROJECT: quarkus-dev
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=.m2/repository
    -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: >-
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    -DinstallAtEnd=true
    -DdeployAtEnd=true  

cache:
  paths:
    - .m2/repository

stages:
  - build
  - test
  - build-container

.deploy_image: &deploy_image
  image: widerin/openshift-cli
  script:
    #- sed -i 's,<LOWERCASE_NAME>,$APPLICATION_NAME,g' deployment.yaml
    - >
      sed -i "s,<LOWERCASE_NAME>,${APPLICATION_NAME},g;
      s,<IMAGE_CONTAINER_PATH>,${IMAGE_REGISTRY_HOMELAB}${container_name},g;
      s,<IMAGE_VERSION_TAG>,${IMAGE_TAG},g;
      s,<APP_SUBDOMAIN>,$APP_SUBDOMAIN,g;
      s,<BASE_OS_ROUTE>,$OPENSHIFT_DOMAIN,g;
      s,<REST_ENDPOINT>,$REST_ENDPOINT,g"
      deployment.yaml

    - cat deployment.yaml
    - oc login --token=${OC_GITLAB_SA} --server=${OC_API}
    - oc apply deployment.yaml


java-17-build:
  # select the most appropriate image for your project
  image: maven:3-openjdk-17
  stage: build
  cache:
    key: "maven-$CI_COMMIT_REF_SLUG"
    paths:
      - .m2/repository
  script:
    - mvn $MAVEN_CLI_OPTS package -DskipTests=true
  artifacts:
    name: "Maven artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    paths:
      - "**/target"

docker-build:
  # select the most appropriate image for your project
  image: docker:latest
  stage: build-container
  services:
    - docker:dind-rootless
  script:
    - docker login -u=$REDHAT_REGISTRY_USERNAME -p=$REDHAT_REGISTRY_PASSWORD registry.redhat.io
    - docker build -t $IMAGE_REGISTRY$container_name:latest .
    - docker push $IMAGE_REGISTRY$container_name:latest
